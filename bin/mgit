#!/usr/bin/env ruby

require "thor"
require "launchy"

require_relative '../lib/git'
require_relative '../lib/issue'

class MgitCLI < Thor
  class_option :force, type: :boolean, aliases: "-f", desc: 'Assume "yes" as answer to all prompts and run non-interactively'
  class_option :debug, type: :boolean, desc: 'Enable debug mode'

  def self.exit_on_failure?
    true
  end

  # Branch command

  desc "branch <issueID>", "Create a branch using issue ID and title"
  long_desc <<-LONGDESC
    The new branch name is taken from the title of the issue found.
    \x5The new branch is created off of the --base-branch or the default base branch.
  LONGDESC
  method_option :base_branch, desc: "the base branch to perform this action on"
  def branch(issue_id)
    base_branch = options[:base_branch] || Git.default_base_branch
    issue = Issue.from_tracker(issue_id)
    prompt = "Create #{set_color(issue.branch_name, :cyan)} branch from #{set_color(base_branch, :cyan)}?"
    if options.force? || yes?(prompt)
      Git.create_branch(base_branch, issue.branch_name) # TODO: Handle errors, same as Git.current_branch()
      done
    else
      skip("Branch not created")
    end
  rescue StandardError => e # TODO: Specify error types
    fail e.to_s.split("\n")[0]
  end 

  # Commit command

  desc "commit", "Create a commit and push to GitHub"
  long_desc <<-LONGDESC
  All of the un-staged files are added, committed and pushed to GitHub.
  \x5The commit message is extracted from the branch name if one is not supplied
  \x5using the --message option. This command does the following:
  \x5
  \x5  - Add all file (if commit was created)
  \x5  - Commit the changes (if commit was created)
  \x5  - Push changes to remote (if commit was created)
  LONGDESC
  method_option :message, desc: "the commit message"
  method_option :issue_id, desc: "the ID of the issue being worked on"
  def commit
    current_branch, stderr, status = Git.current_branch()
    raise stderr unless status.success?

    # TODO: ask for confirmation

    message = options[:message]
    if !message && options[:issue_id]
        message = Issue.from_tracker(options[:issue_id]).to_s
    elsif !message
      message = Issue.from_branch(current_branch).to_s
    end
    
    Git.commit_all(message) # TODO: Handle errors, same as Git.current_branch()
    Git.push(current_branch)
  rescue StandardError => e # TODO: Specify error types
    fail options.debug? ? e : e.to_s.split("\n")[0]
  end

  # Init command

  desc "init", "Initialize local repository and push to remote"
  long_desc <<-LONGDESC
  This command is idempotent and it will prompt you before commiting changes and
  \x5pushing them to the remote repo. This command does the following:
  \x5
  \x5  - Create .gitignore file (if not already created)
  \x5  - Initialize a git repo (if not already intialized)
  \x5  - Asks to create an initial commit
  \x5  - Add all file (if user confirmed commit)
  \x5  - Commit the changes (if user confirmed commit)
  \x5  - Push changes to remote (if user confirmed commit)
  LONGDESC
  def init
  rescue StandardError => e # TODO: Specify error types
    fail e.to_s.split("\n")[0]
  end

  # Open command

  desc "open", "Open an issue in the default web browser"
  def open
    say("Opening issue...")
    stdout, stderr, status = Git.current_branch()
    if status.success?
      issue = Issue.from_branch(stdout)
    else
      fail stderr.split("\n")[0]
    end
    Launchy.open(issue.web_url)
  rescue StandardError => e # TODO: Specify error types
    fail e.to_s.split("\n")[0]
  end

  # Pull request command

  # TODO: Add pull_request alias for command
  desc "pr", "Create a GitHub Pull Request for the specified branch"
  long_desc <<-LONGDESC
  This command is idempotent and it will prompt you before commiting changes and
  \x5pushing them to the remote repo. This command does the following:
  \x5
  \x5  - Asks to create a commit
  \x5  - Add all file (if user confirmed commit)
  \x5  - Commit the changes (if user confirmed commit)
  \x5  - Rebase changes off base branch (if user confirms rebase)
  \x5  - Push changes to remote 
  \x5  - Create the pull request on GitHub
  LONGDESC
  method_option :base_branch, desc: "the base branch to perform this action on"
  method_option :message, desc: "the commit message"
  def pr
    base_branch = options[:base_branch] || Git.default_base_branch
  rescue StandardError => e # TODO: Specify error types
    fail e.to_s.split("\n")[0]
  end

  private 

  # TODO: Remove when commands are fully implemented.
  def todo(name)
    say("TODO: ", :yellow)
    say("Implement #{name}")
  end

  def fail(message)
    say("FAIL: ", [:red, :bold])
    say(message)
    exit 1
  end

  def skip(message)
    say("SKIP: ", :yellow)
    say(message)
  end

  def done
    say("OK", [:green, :bold])
  end
end

MgitCLI.start(ARGV)